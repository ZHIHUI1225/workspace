// Generated by gencpp from file robot_msg/target_pose_array.msg
// DO NOT EDIT!


#ifndef ROBOT_MSG_MESSAGE_TARGET_POSE_ARRAY_H
#define ROBOT_MSG_MESSAGE_TARGET_POSE_ARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msg/target_pose.h>

namespace robot_msg
{
template <class ContainerAllocator>
struct target_pose_array_
{
  typedef target_pose_array_<ContainerAllocator> Type;

  target_pose_array_()
    : target_pose_array()  {
    }
  target_pose_array_(const ContainerAllocator& _alloc)
    : target_pose_array(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_msg::target_pose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robot_msg::target_pose_<ContainerAllocator> >> _target_pose_array_type;
  _target_pose_array_type target_pose_array;





  typedef boost::shared_ptr< ::robot_msg::target_pose_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msg::target_pose_array_<ContainerAllocator> const> ConstPtr;

}; // struct target_pose_array_

typedef ::robot_msg::target_pose_array_<std::allocator<void> > target_pose_array;

typedef boost::shared_ptr< ::robot_msg::target_pose_array > target_pose_arrayPtr;
typedef boost::shared_ptr< ::robot_msg::target_pose_array const> target_pose_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msg::target_pose_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msg::target_pose_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msg::target_pose_array_<ContainerAllocator1> & lhs, const ::robot_msg::target_pose_array_<ContainerAllocator2> & rhs)
{
  return lhs.target_pose_array == rhs.target_pose_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msg::target_pose_array_<ContainerAllocator1> & lhs, const ::robot_msg::target_pose_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msg::target_pose_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msg::target_pose_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::target_pose_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msg::target_pose_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::target_pose_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msg::target_pose_array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msg::target_pose_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7368196c844e512e8b512a71481181c8";
  }

  static const char* value(const ::robot_msg::target_pose_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7368196c844e512eULL;
  static const uint64_t static_value2 = 0x8b512a71481181c8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msg::target_pose_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/target_pose_array";
  }

  static const char* value(const ::robot_msg::target_pose_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msg::target_pose_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msg/target_pose[] target_pose_array\n"
"\n"
"================================================================================\n"
"MSG: robot_msg/target_pose\n"
"int8 ID\n"
"geometry_msgs/Point position\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::robot_msg::target_pose_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msg::target_pose_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_pose_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_pose_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msg::target_pose_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msg::target_pose_array_<ContainerAllocator>& v)
  {
    s << indent << "target_pose_array[]" << std::endl;
    for (size_t i = 0; i < v.target_pose_array.size(); ++i)
    {
      s << indent << "  target_pose_array[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_msg::target_pose_<ContainerAllocator> >::stream(s, indent + "    ", v.target_pose_array[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSG_MESSAGE_TARGET_POSE_ARRAY_H
